=encoding utf8

Brouillon.
Note: c'est une ébauche
C<...!> est utilisé pour dénoter les parties manquantes ou à élaborer
Les paragraphes commençant par C<Note:> s'adressent aux contributeurs ou aux relecteurs
et non au lecteur final.

=head1 TITLE

initiation à Perl 6 via son shell


=head1 Initiation à Perl 6 via son shell

La maîtrise de ce tutoriel et du TP correspondant sont un prérequis
indispensable pour pouvoir suivre le reste de cet atelier.  Ce texte
comprend des liens vers les synopsis qui sont la spécification du
langage S<Perl 6>.  Il n'est pas conseillé de les suivre à la première
lecture.

Dans le cadre de ce TP, nous allons apprendre à manier le shell Perl 6
pour découvrir le langage via ses facilités d'introspection. Nous
supposons que vous êtes familier avec le langage S<Perl 5> car nous
soulignerons les similarités et les différences entre les deux
langages. Nous glissons quelquefois sur quelques subtilités pour
obtenir une présentation plus linéaire, et faisons délibéremment
quelques approximations pour que ce texte garde un caractère
pédagogique. Finalement, nous gardons souvent le vocabulaire anglais
des synopsis puisque l'essentiel du matériel S<Perl 6> est en
anglais. Autant se familiariser de suite. Quelquefois, nous revenenous
au français avec l'original entre parenthèses lorsque un nom ne se
"verbe" pas élégamment. :)

Lorsque nous renvoyons au Wikipedia, c'est vers l'article français ou,
en son absence l'article anglophone. L'article anglophone est généralement
plus complet ou de meilleur qualité.

Nous supposons que vous avez compilé et installé rakudo, ainsi que
ack, un utilitaire perl5; votre interpréteur perl est 5.x avec x >=
10.  votre répertoire courant est celui des sources rakudo après
compilation.

Dans les morceaux de sessions shell de cet article, le dollar et le
caractère supérieur représent respectivement le prompt du shell unix
et celui de l'interpréteur rakudo. Dans ces sections shells, C<...> signifie
que nous avons éludé les sorties qui ne nous intéressent pas.
Dans les sections de code, il s'agit de code volontairement éludé quand en italique.
Occasionnellement, nous utiliserons
le déboggeur du l'interpréteur S<perl 5> comme un S<shell :>

  $ perl -dE 0
  DB<1> say 'foo' # soyons fou
  
Note: le  ':5.10' impliqué par -E est perdu. Rafael me dit que c'est corrigé dans une version récente. Qu'en est-il du comportement des variables lexicale.
Utiliser plutôt le Devel::??? de acme qui est plus similaire dans son comportement au shell Perl 6. Nécessiterait une section spécifique qui pourrait être écrite par un contributeur car ne nécessitant pas de connaissance Perl 6

Une courte session  S<Perl 6 :>

  $ perl6 --version
  This is perl6 version 2012.02-173-gb13c517 built on parrot 4.1.0 revision RELEASE_4_1_0-35-g47bfa1f
  $ perl6
  > say 'a' ~ 'b' # une ligne de code Perl6
  ab
  > exit
  $
  

On voit les numéros abrégés de commit des dépôts C<rakudo> et
C<parrot>. C<nqp> est curieusement omis.  Notre curiosité insatiable
nous amène à chercher quel est le code qui affiche la version de
S<Perl 6 :>

  
  $ ack --nocolor --nogroup  -i -- 'this is' | grep -w version
  ...
  nqp/src/HLL/Compiler.pm:508:        nqp::say("This is $!language version $version built on parrot $parver revision $parrev");
  ...
  
 En ouvrant ce fichier à la ligne indiquée on S<trouve :>
 
  method version() {
      my $version := %!config<version>;
      my $parver  := %parrot_config<VERSION>;
      my $parrev  := %parrot_config<git_describe> // '(unknown)';
      nqp::say("This is $!language version $version built on parrot $parver revision $parrev");
      pir::exit__vi(0);
  }
  

C'est du code S<Perl 6>. Il semble à la fois familier et différent Ce
code est familier en ce sens que les variables ont des sigils, qu'il y
a des espaces de noms, qu'il y a interpolation de variables dans une
chaîne doublement quotée.  Ce code est différent car S<Perl 6>, tout
au moins dans son mode par défaut, n'est pas une extension de S<Perl 5>. 
Nous reviendrons sur cette section de code plus tard.

  
  $ perl6  # on omettra par la suite cette ligne de lancement d'une session Perl 6
  >  'a' ~ 'b'
  ab
  > 'a'.WHAT
  Str()

  
Ci-dessus, on voit que pour chaque ligne évaluée, le shell affiche sa valeur. En
fait, le shell affiche la valeur de la dernière expression de la
chaîne évaluée. On constate au passage deux nouveautés syntaxiques.
la première est la raison de la seconde.  L'opétareur d'appel de
méthode n'est plus C<< -> >> mais C<.> (un point). Donc le point n'est
plus disponible comme opérateur de concaténation. Le C<.WHAT> est une
méthode, qui, appliquée à un objet, retourne le type de l'objet.
Notez la convention du pseudo-sigil point pour dénoter le nom d'une
méthode.

S<Perl 6> est un langage réflexif. Pour la définition de ce concept, je
vous renvoie au Wikipedia.  Cela signifie notamment que tous les types
nécessaires à la compilation d'un programme sont accessibles du programme
lui-même.

Nous allons beaucoup utiliser les méthodes C<.WHAT>, C<.WHO>, C<.Str>,
C<.perl>, C<.gist> pour savoir à quel types d'objets nous avons
affaire et pour avoir une représentation imprimée de S<l'objet:>

  > 'a'.Str
  'a'.Str
  a
  > 'a'.gist
  'a'.gist
  a
  > 'a'.perl
  'a'.perl
  "a"
  > 

J'ai commis un petit mensonge C<.WHAT> n'est pas vraiment une méthode
mais une macro mais la différence nous importe peu pour le moment.

Nous avons dit que C<.WHAT> retourne le type d'une objet. Mais quel est le type d'un type?
C'est le type lui-même, c'est un objet indéfini et ne peut être casté en une chaîne.

  > 1.WHAT
  Int()
  > 1.WHAT.WHAT
  Int()
  > 1.WHAT.WHAT.Str
  use of uninitialized value of type Int in string context
  > 1.WHAT.WHAT.gist
  Int()
  > 1.WHAT.WHAT.perl
  Int
  > say "undefined" unless 1.WHAT.defined
  undefined


Nous utilisons deux opérateurs infix, C<===> et C<==>. L'opérateur
C<===> est un test d'identité alors que C<==> est un test d'égalité.
Nous voyons que l'opérateur C<===> n'accepte pas des objets type comme opérande,
mais le message d'erreur mentionne des paramètres au lieu d'opérandes.
Cela nous rappelle que les opérateurs sont juste du sucre syntaxique pour exprimer une fonction.


We see that C<==> does not accept type objects as operand, but the error message speak of
parameter instead of operand. It reminds us that operators are just syntactic sugar for function.


  > 1.WHAT === 1.WHAT.WHAT
  1.WHAT === 1.WHAT.WHAT
  True
  > 1.WHAT == 1.WHAT.WHAT
  1.WHAT == 1.WHAT.WHAT
  Parameter '' requires an instance, but a type object was passed


Le sucre syntaxique est une convention qui permet d'exprimer plus
commodément quelque chose.  Il est quelquefois tellement ancré dans
langage que l'expression dont il est l'alternative n'est même pas
disponible dans le langage. En général en S<Perl 6>, on trouve les
deux formes. Dans la section qui suit, nous verrons ces deux formes pour
les rôles C<

=head2 Rôles C<Positional> et C<Associative>, sigils associés

...et sucres syntaxiques correspondants.
Nous connaissons bien en S<Perl 5> les tableaux et les hash.
Regardons la différence entre  S<Perl 5> et S<Perl 6 :>


  DB<1> my @a = (42, 666); print $a[1]
  666
  DB<2> my %a; $a{'42'} = 'ultimate answer'; print  $a{'42'}
  ultimate answer

  > my @a = 42, 666; say @a[1]
  666
  > say @a.at_pos(1)
  666  

  > my %a;  %a<42> = 'ultimate answer'; say %a{'42'}; say %a<42>
  ultimate answer
  ultimate answer
  > %a.at_key('42')
  %a.at_key('42')
  ultimate answer


Notons que la précédence relative de l'affectation et de la virgule a changé de sorte
que les parenthèses ne sont pas nécessaires. En perl 5, c'est la virgule qui construit
la liste et non les parenthèses comme on le croit souvent. Les parenthèses ne sont là
que pour forcer l'évaluation de la liste avant son affectation. 

On voit qu'en C<Perl 6>, le sigil est invariant, il ne se change pas
en dollar quand on accède les éléments d'un hash ou d'un tableau.

Notons que tous les langages répandus surchargent la syntaxe d'accès à
des tableaux pour des objets dont la nature est associative. Perl 5 et
Perl 6 ont une syntaxe spécifique avec des accolades.

Les tableaux sont des objets qui implémentent le rôle C<Positional>.
Les hash sont des objets qui implémentent le rôle
C<Associative>. L'adjectif associatif désigne ici la propriété d'un
objet qui associe des valeurs à des clés, non pas la propriété
algébrique d'un opérateur hypothétique.

Les rôles sont une manière de composer du code. On compose un rôle
dans une classe avec la directive(??) C<does>. 

Ci-dessous le code pour les rôles C<Positional> et C<Associative>
adapté de l'implantation de rakudo.  Ainsi la classe C<Array> est
dérivée de la classe C<Iterable> qui compose le rôle C<Positional>.
Ces rôles génériques sont paramétrés par défaut avec la classe C<Mu>
mais nous ne parlons ici des rôles que pour montrer que C<@a[1]> n'est
que du sucre syntaxique pour l'appel de méthode C<@a.at_pos(1)>.  De
même pour C<@a{'42'}> qui est l'équivalent de C<@a.at_key('42')>.


  role Positional[::T = Mu]  {  method at_pos($pos) { ... }   }
  role Associative[::T = Mu] {  method at_key($key) { ... }   }

  class List is Iterable does Positional { ... }
  class Array is List { ... }





...

Ces méthodes existent aussi sous forme de fonctions.

  
...

Notons que S<Perl 6> se comporte comme le mode C<strict> de Perl 5. Il
n'y a pas de chaîne S<nue :> C<aaa> n'est pas interprété comme la
chaîne C<"aaa"> quand la fonction C<&aaa> n'est pas définie.

  > aaa
  aaa
  CHECK FAILED:
  Undefined routine '&aaa' called (line 1)
  > $a = 1
  $a = 1
  Variable $a is not declared

  


Pour vous mettre en appétit, explorons un unligne dont le décorticage nous
servira de prétexte à un début d'exploration du langage.

  say "$_: { perl WHAT try  eval $_ }"  for < [] {} () \() :() [] !@@% >
  
Note: BUG! perl as a function is missing

Cet uniligne affiche.

  [] : Array
  {} : Hash
  ()  : Parcel
  \() : Capture
  :() : Signature
  !@@%: X::Syntax::SigilWithoutName


On voit que le script interprète des chaînes de caractères et affiche
le type de la valeur générée sauf dans le dernier cas où il semble
qu'un type d'erreur s'affiche. Notons que C<[]> et C<{}> nous sont
familiers. En C<Perl 5>, c'est la manière de créer respectivement un
tableau et un hash.

  $ perl -E 'say ref([]) . " " . ref {}'
  ARRAY HASH

En Perl6, C<[]> et C<{}> sont des composers. C'est du sucre syntaxique pour éviter d'appeler le constructeur
pour un type d'objet donné.

=head2 valeur mutable, immutable et Binding

Le binding est l'opération qui consiste à lier une valeur à un nom.
Par défaut, lors de l'appel d'une fonction, selon qu'une valeur argument est mutable ou non,
la valeur est liée ou copiée vers le paramètre correspondant.

...!

=head1 Quelques mots sur les rôles

La programmation objet classique (OOC) a tendance à abuser du mécanisme de dérivation
de classe. Elle a ensuite introduit la notion de classe abstraite dont
certaines méthodes ne sont pas définies. Une classe abstraite n'est
pas instantiable. Finalement une classe abstraite dont aucune méthode
n'est définie est appelée une interface.

Ces subtilités ont été introduites car le mot classe recouvre en fait
deux notions bien différentes. La première est celle d'unité
d'instanciation d'objet et la seconde d'unité de composition de code.
Ci dessous C<Numeric> est un rôle qui contraint la nature du conteneur pour
la variable C<$n>. On voit que la variable contenue est de type C<Int>.

  > my Numeric $n = 1; say $n.WHAT
  > Int()
  >

=head1 Les types Parcel, Capture et Signature

...!

=head Composer et interpolation dans les chaînes

...!

On voit que beaucoup de choses sont familières au programmeurs S<Perl 5> avec quelques variantes. Le C<< <I<...>> >> est l'équivalent Perl 6 de C<qw( I<...> )>
  

...!

Nous allons découvrir un peu de syntaxe pour exprimer des valeurs natives et des objets.

S<Perl 6> offre des valeurs natives qui peuvent être stockées dans des
registres réels ou virtuels (Parrot).  Ces valeurs peuvent être
exprimées par des litéraux. Un litéral est une unité atomique
syntaxique (ou token) qui exprime une telle valeur. Beaucoup d'entre
elles sont familières à des programmeurs C ou Perl.  C<1.0>, C<1>,
C<'toto'> expriment respectivement un réel, entier ou chaînes dont les
noms de type sont respectivement C<num>, C<int>, C<str>. La première
lettre d'un type natif est minuscule. Celle des autres types est
majuscule, pour autant qu'on reste dans l'alphabet latin, ce qui est
le cas de ce tutoriel où nous ne parlerons pas d'Unicode.

On peut utiliser ces valeurs natives comme des objet.

...!


Note: Discuter du modèle métaobjet via .HOW
       Couvrir  : Native types, The Mu type, Undefined types, Immutable types, Mutable types, Of types, Container types, 
       Hierarchical types, Polymorphic types, Parameter types, Generic types, The Cool class (and package)
