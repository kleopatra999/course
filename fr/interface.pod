=encoding utf8

L<Notes en vrac|https://github.com/perl6/specs/blob/master/S01-overview.pod#___top> à réordonner et compléter.  Certaines notes sont amenées
à disparaître ou à être déplacées. Elles sont pour le moment
nécessaires à la recherche pour la constitution du tutoriel mais pas
au document final.

Une fois la partie théorique complétée, je comparerai les types déjà implantés.
Dois rechercher dans l'écosysteme Perl 6 d'autres types implantés.
J'implanterai un type à taille fixe, le sha1 et un type à longueur variable, un L<bitvector|http://www.devshed.com/c/a/Perl/More-Perl-Bits/2/>.

On peut construire des types intéressants à base de bitvectors dérivés d'un type SmartSet.
Une classe dérivée de SmartSet, appellons là S, comprend un hash qui associe des entiers à des clés et un tableau qui
représente la relation inverse. La classe S implémente un ensemble et ces instances des sous-ensembles.
Le bitvector de l'instance définit les éléments du sous-ensemble.
L'ensemble ne contient pas de bitvector puisqu'il serait redondant (composé de 1).
Le hash de S permet de nommer les éléments de l'ensemble et d'associer un bit dans le bitvector.
On peut croître l'ensemble S dynamiquement ce qui rallongera les bitvectors.
SmartSet définit les opération ensemblistes.
Le cas simple est quand ces opérations ensemblistes opèrent sur des sous ensembles de S.
Mais on peut avoir plusieurs classes dérivées de SmartSet. Nommons les S et S'.
Supposons que nous voulons travailler sur des sous-ensembles de leur unions. Il
devront être représentés par deux bitvectors si nous voulons pouvoir croître ces ensembles.
De plus, il y a possibilité de clash de clés (ie: de noms d'élément), donc en cas
d'ambiguité une clé doit être préfixée par le nom de son ensemble.
D'ailleurs, un sous-ensemble composite sera implémenté par un hash de bitvectors indexés par
le nom des ensembles. Il est même possible qu'on veuille gérer les collision sur le nom des ensembles; auquel
cas un ensemble est identifié par un sha1 aléatoire. Les bitvectors seront alors indexés par
les sha1. Par commodité, l'utilisateur de tel vecteurs pour renommer les ensembles.



Elaborer sur les types implantés par rakudo peuvent L<boxer des types natifs|http://perlcabal.org/syn/S02.html#Built-in_Type_Conventions> mais que la
possibilité de conversion peut dépendre de la valeur (ex: Rat -> int ) alors que la
conversion n'a pas de sens pour la plupart des types externes (ex: sha1, bitvector)

=head1 Découplage de L<6model|https://github.com/jnthn/6model/blob/master/overview.pod> par rapport à Parrot

Parrot fournit la notion de PMC, L<PolyMorphic Container|http://fr.wikipedia.org/wiki/Parrot_%28machine_virtuelle%29#Parrot_Polymorphic_Containers> qui est grandement redondante
mais moins puissant que 6model. Le 6model implémente un meta object protocol (L<MOP|http://perl6advent.wordpress.com/2010/12/22/day-22-the-meta-object-protocol/>)
qui permet une introspection des types objet.
Parrot a été historiquent nécessaire pour booter rakudo et n'a pas su fournir à temps un
MOP. Il est question de porter le 6model de rakudo sur Parrot pour remplacer les PMC.
A terme rakudo devrait pouvoir utiliser d'autres VM que Parrot

=head3 le MOP, c'est pas nouveau 

le MOP n'est pas un concept nouveau puisqu'il a été implanté dans un dialecte de lisp CLOS. Un bouquin paru
en 1991 document MOP.

L<http://www.amazon.fr/The-Metaobject-Protocol-Gregor-Kiczales/dp/0262610744/ref=sr_1_1?ie=UTF8&qid=1335436556&sr=8-1>

Quelle technologie informatique n'a pas été inventé dans l'univers LISP? Hé bien, celle d'une syntaxe extensible comme celle Perl 6
qui reprend aussi la notion de L<macro hygiénique|http://fr.wikipedia.org/wiki/Macro-d%C3%A9finition> inventée par ... LISP. A part la syntaxe, il faut bien avouer que Perl 6 et
ses implémentations ne sont que l'union laborieuse de technologies dont certaines existent depuis des décennies.


=head1 Interfaçe de rakudo avec du code externe

Interfacer rakudo avec du code externe signifie souvent appeler du
code externe qui utilise ses propres types de données.

Pour les cas les plus simples, la seule compétence préalable pour ce
TP est la maîtrise du langage C.  Néanmoins, comme il s'agit de
s'interfacer avec un compilateur, il faudra acqérir un minimum de
compétences supplémentaires.  Ce document présente toutes les
abstractions nécessaires qu'on rencontrera dans tous les compilateurs
suffisamment avancés et les structures de données propres à Rakudo.

Rakudo n'est pas encore optimisé donc il est lent, par contre Perl 6,
étant un langage très expressif, on gagne beaucoup à l'utiliser pour écrire 
des scripts qui passeront la majeure partie de son temps dans une
bibliothèque externe et non dans le code Perl 6 non optimisé. Auquel cas la lenteur de Perl 6
sera irrelevante. L'utilisation de bibliothèques externe est
possible, car depuis quelque mois, Jonathan a intégré le métamodèle
qui permet d'étendre rakudo.  Si les mécanismes de bases sont présents
dans rakudo, une bibliothèque appelée L<zavolaj|https://github.com/jnthn/zavolaj/> ajoute un peu de glue en
pure Perl 6 qui fournit les rôles et les traits pour utiliser lesdits
mécanismes.

La présente doc vient en complément de
C<nqp/docs/6model/overview.markdown>.  Cette doc présente les
mécanismes généraux donc nous présenterons les structures C qui
permettent de les implanter. On prendra pour modèle les types
préexistants de rakudo, dont la partie de l'implantation en C est dans
C<nqp/src/6model/reprs/>.

Opérations à S<implanter :> (dé)allocation, (dé)sérialisation.

Lorsqu'un module est compilé, les données le concernant sont
sérialisées. Pour (dé)sérialiser les objets d'un type donné, le
(dé)sérialiseur pour ce type est appelé.


Tout objet en C++ contient des pointeurs vers une ou plusieurs vtable.
Il pointent vers les méthodes qui peuvent être exécutées avec l'objet
pour invocant. Le système de rakudo est similaire mais beaucoup plus
riche.

Enregistrement des types.

Il semble que nqp est pour le moment intimement lié aux types natifs de
parrot (S<exemple :> une opération sur un entier utilise un opcode parrot).
La branche C<qast> de rakudo va découpler dès ce niveau.

C<REPR_initialize_registry> appelé par SixModelObject_initialize par C<nqp_dynop_setup>

    nc_repr_id = REGISTER_DYNAMIC_REPR(interp,
    Parrot_str_new_constant(interp, "NativeCall"),
    NativeCall_initialize);
	
	
Enregistement S<dynamique> : opcode C<nqp_native_call_setup> défini
dans C<nqp_dyncalls.ops> définit les types utilisés par C<zavolaj>.
Défini dans la méthode C<to_past()> de C<src/Perl6/World.pm>. Appelle
C<REPR_register_dynamic>?

Différents mots clés pour désigner différents types de paquetage.

  module knowhow class grammar role native

  C<Action.pm>

    method package_declarator:sym<native>($/)  { make $<package_def>.ast }
  

Natives:`

  C<src/Perl6/Metamodel/NativeHOW.pm>

question: peux-t'on appeler une méthode sur un objet natif sans le wrapper?

src/core/natives.pm

    my native int1 is repr('P6int') is Int is nativesize(1) { }
	
src/core/traits.pm:24  
  
    multi trait_mod:<is>(Mu:U $type, $size, :$nativesize!) {
       $type.HOW.set_nativesize($type, $size);
    }
  


driver pour un objet



src/binder/sixmodelobject.h
  
  /* The commonalities shared between all 6model objects, no matter what the
   * REPR is. This struct should be placed as the first thing in the object
   * struct used by all representations. */
  typedef struct {
      PMC *stable;  /* The shared table. */
      PMC *sc;      /* Serialization context. */
  } SixModelObjectCommonalities;
  
  /* An example object, mostly used to compute the offset of the data part of
   * a 6model object. */
  typedef struct {
      SixModelObjectCommonalities common;
      void *data;
  } SixModelObjectStooge;
  
  
  /* S-Tables (short for Shared Table) contains the commonalities shared between
   * a (HOW, REPR) pairing (for example, (HOW for the class Dog, P6Opaque). */
  typedef struct SixModel_REPROps REPROps;
  
  struct SixModel_STable {
      /* The representation operation table. */
      REPROps *REPR;
      void *REPR_data;
  	...
  }
  
=head3 REPR_data

  my int @a; # creates an array of ints

C'est synonyme de :
 
my @a of int;
  
On utilise C<CArray> pour représenter un type tableau générique.

nqp/src/6model/reprs/CArray.h:52

  /* The CArray REPR data contains a little info about the type of array
   * that we have. */
  typedef struct {
      /* The number of bytes in size that an element is. */
      INTVAL elem_size;
  
      /* The type of an element. */
      PMC *elem_type;
      
      /* What kind of element is it (lets us quickly know how to handle access
       * to it). */
      INTVAL elem_kind;
  } CArrayREPRData;
  

src/core/Positional.pm:1

  my role Positional[::T = Mu] {
      method of() { T }
  }
  
src/core/traits.pm:127
  
  proto trait_mod:<of>(|$) { * }
  multi trait_mod:<of>(Mu:U $target, Mu:U $type) {
      # XXX Ensure we can do this, die if not.
      $target.HOW.set_of($target, $type);
  }
  multi trait_mod:<of>(Routine:D $target, Mu:U $type) {
      $target.signature.set_returns($type)
  }
  
  





Dans le cadre de ce TP, nous étudierons comment étendre rakudo, pour
utiliser des objets définis dans des dlls externes.

L<http://jnthn.net/papers/2012-gpw-meta-programming.pdf>


Nous commencerons par étudier un type simple, le sha1 qui est ma
première contribution d'un type nouveau dans rakudo.
Ca s'avère plus compliqué que privé car les routines atomiques de (dé)sérialisation
sont insuffisantes.

=head1 Implantation d'un type

Un type est défini par l'ensemble des valeurs qu'il peut prendre et
par les opérations qui s'appliquent à lui.  S<Perl 6> a deux sortes de
types, les types natifs et les types objets.  Les noms des types objets
commencent par une majuscule alors que le nom des types natifs commence
par une minuscule.  Pour chaque type natif il existe un type object
correspondant. Lorsque c'est nécessaire, une valeur native peut être
convertie en valeur objet et réciproquement. On parle respectivement
de L<boxing|"Boxing"> et de L<unboxing|"L'unboxing n'est pas toujours possible.">.

Notons qu'une valeur doit être boxée pour être vue du ramasse miette
car un type natif ne contient pas les bits nécessaires à sa gestion.
Mais certaines valeurs peuvent n'être accessibles que d'un scope et peuvent donc
être gérées par le seul compilateur sans l'aide du ramasse miette.


Pour n'être visible que d'un scope, il faut que toutes les références
à une valeur appartiennent au même scope.
La déclaration d'une variable est la premère référence à la 
valeur associée, mais d'autres peuvent être crées via l'opération de binding (C<:=>) ou
d'appel de fonction. Dans le second cas, le binding lie le paramètre à l'argument.
Dans la fonction un binding peut être créé qui survivra à son appel.


TODO exemple et contre-exemple

=head1 langages statiques/dynamiques; variables, conteneurs, native, boxed

=head1 Langage dynamiquement typé

Perl 5 est un langage dynamique. C'est un concept flou. Dans le cadre
de ce document, on entendra par là que le type des valeurs n'est pas
connu à la compilation. On parle aussi de langage dynamiquement typé.
Dans le cadre de cet article, quand je dirai dynamique
(resp. statique) sans qualificatif, il s'agira de typage dynamique
(resp, statique) et de ses conséquences, comme la nature du code
généré.

Dans un langage purement dynamique, on ne cannait pas à l'avance le
type d'un conteneur, c'est à dire l'entité qui contient une
valeur. Certains des conteneurs sont gérés explicitement pour le
programmeur : ce sont les variables. D'autres conteneurs sont invisibles
pour le programmeurs, ce sont le résultat de calculs intermédiaires,
par exemple dans une opération arithmétique composite. Finalement
certains conteneurs font partie de conteneurs composites et son
accessibles via des index. L'index sera typiquement une chaîne de
caractères pour accéder un hash et toujours un entier positif pour un
tableau.

Une variable associe un nom, visble dans un certain scope, à un
conteneur qui, à un instant donné, lui-même contient une
valeur. Lorsque c'est possible on ne se préoccupe pas du conteneur,
car l'implantation gère ce genre de détail.  Mais dans le cadre de ce
TP, on s'occupe précisemment de l'implantation.


Dans certains langages, une variable peut désigner une constante, ce
qui semble une contradiction si on s'attache à la seule signification
traditionnelle et antinomique de ces deux mots. Ici, une constante
est simplement une variable dont la valeur ne change pas au cours du
temps. En général, un langage s'assure qu'une constante soit
initialisée avant usage, sinon elle aura une valeur prédéfinie ou
inconnue.

Pour savoir commment opérer sur une valeur, il faut
connaître son type.  Une addition sur un entier est une opération
totalement différente d'une opération sur un flottant.  Concrètement,
faute de connaître à l'avance le type de la valeur,cela veut dire
qu'il faut stocker non seulement la valeur proprement dite mais aussi
son type.

=head1 Langagement statiquement typé

Inversement

Langage statiquement typé ne signifie pas nécessairement que le typage
des variables doit être fait explicitement par le programmeur. Certains
langages statiquement typés, comme Haskell sont capables d'inférer le type à la
compilation. Cela signifie que toutes les informations sont disponibles
à la compilation pour générer du code spécifique au type inféré.
Ainsi, si du code objet est généré, le bon opcode ou le bon appel de
routine pour l'addition sera généré, qu'elle soit entière,flottante
(opcode généré) ou complexe (généralement appel de routine généré).

On parle souvent d'annotation de type.


=head2 Langage à typage mixte

Perl 6 est un langage à typage mixte.
Vous n'avez pas nécessairement à déclarer le type des variables.

=head2 L'unboxing n'est pas toujours possible.



Avec C<but>, on peut attacher une valeur "sur le côté" de la
valeur principale. Ainsi on peut attacher un booléen à côté d'une
valeur C<Int>

 > my Int $Int = 3 but False;
 >  my Int $Int = 3 but False; ($Int, ?$Int).perl.say
 (3, Bool::False)
 >   my int $int = $Int
 ...  # messages incomprehensibles
 ===SORRY!===
 Lexical '$int' is of wrong register type in lexical lookup


=head2 Boxing

Perl 6 comporte 3 types natifs primaires, C<int>, C<float>, C<str>.
Des types natifs secondaires peuvent être dérivés en restraignant
l'ensemble des valeurs autorisées:

src/core/natives.pm:1
 
   my native int is repr('P6int') is Int { }
   my native int1 is repr('P6int') is Int is nativesize(1) { }
   

On aura compris que l'usage de types natifs résulte en du code plus rapide alors
que l'usage de types objets est plus souple.

En pratique, la distinction est souvent invisible pour
l'utilisateur. Mieux, un bon compilateur saura voir qu'il peut
optimiser un type objet en un type natif.  Qui plus est, la différence
entre compilateur et interpréteur est de plus en plus flou et on
tendra à utiliser un terme plus large : moteur.

Ainsi le moteur v8 de chrome gère du javascript. Javascript est un
langage à typage dynamique.  Pourtant v8 est capable de compiler à la
volée du code typé statiquement selon le type des argument d'une
routine.

=head1 Enregistrement dynamique de type

nqp/src/6model/repr_registry.c:176

  INTVAL REPR_register_dynamic(PARROT_INTERP, STRING *name, REPROps * (*reg) (PARROT_INTERP, void *, void *)) {

enregistré dans le 	C<interp->root_namespace> sous le nom de C<_REGISTER_REPR> donc probablement accessible de rakudo, au pire via
un C<Q:PIR { ... }>


=head1 Sha1

Un sha1 est une L<fonction de hashage cryptographique|http://fr.wikipedia.org/wiki/Fonction_de_hash#Fonction_de_hachage_cryptographique> qui permet de
représenter une chaîne quelconque par un condensat de 20 octets. La
représentation imprimable du condensat est le digest de 64 octets.
Donc notre type sha1 supporte donc seulement deux opérations : un constructeur et une opération de cast.
Le constructeur prend une chaîne en entrée et retourne le sha1. Et
l'opération de cast C<.Str> qui a pour invocant un sha1 et retourne
son digest.  Notons S<que :> C<sha1.new($str).Str ne $str>.

Notons qu'un cast de type A vers type B n'est jamais qu'un constructeur
du type B s'il est définit dans B.

Les probabilités de collisions, c'est-à dire que deux chaînes
différentes soient représentées par le même condensat, sont
infinitésimales. Le sha1 est utilisé un peu partout. Dans les systèmes
de stockage, le sha1 permet d'identifier quand plusieurs fichiers sont
identiques et donc de les stocker qu'une seule fois. Git, le système
de gestion décentralisé de versions inventé par Linus Torvald repose sur
le sha1 des objets qu'il crée pour les identifier.
Notons que git est la majeure partie des projets Perl utilisent git, ce qui
permet de les héberger sur le site collaboratif C<github.com>. Nous
vous proposons d'y créer un compte et d'héberger le contenu de vos TP
sur github.


Il se trouve que la bibliothèque est déjà liée à rakudo car elle est 
utilisée pour définir l'opcode pir C<nqp_sha1>.  Le code en S<question
:> C<nqp/3rdparty/sha1/> .

Un sha1 est une structure de longueur fixe : C<SHA1_DIGEST_SIZE>.
C<SHA1_DIGEST_SIZE> étant défini comme 20 et le type C<char> étant long
d'un octet,    C<unsigned char digest[SHA1_DIGEST_SIZE]> est un tableau de 20 octets.
Donc toute l'info concernant le corps d'une instance sha1 est contenue dans ce tableau qui est
l'unique membre de la struct <Sha1Body>, elle même enchassée dans la struct Sha1Instance.



#ifndef SHA1_H_GUARD
#define SHA1_H_GUARD
#include "../../../3rdparty/sha1/sha1.h"
  
typedef struct {
    /* sha1 digest */
  unsigned char digest[SHA1_DIGEST_SIZE];
} Sha1Body;
  
/* This is how an instance with the Sha1 representation looks. */
typedef struct {
    SixModelObjectCommonalities common;
    Sha1Body body;
} Sha1Instance;
  
/* Initializes the Sha1 REPR. */
REPROps * Sha1_initialize(PARROT_INTERP);
  
#endif
  






  multi trait_mod:<is>(Attribute:D $attr, :$box_target!) {
      $attr.set_box_target();
  }

=head2 petite digresssion

Cette digression pour montrer que pour comprendre une petite chose
dans un compilateur, il faut souvent visiter au moins une
demi-douzaine de fichiers. Une bonne expertise en C<ack> est
nécessaire.


C<nqp_sha1> est défini dans un fichier C<.ops>. On s'attendrait donc à
voir cet opcode appelé dans un fichier <.pir>. Or une recherche C<ack
-G '\.pir$' nqp_sha1> ne donne rien.  En fait, les opcodes sont
souvent utilisés dans du code C<nqp> ou C<perl6> dans des blocs qui
contiennent du code PIR. Ils sont de la forme.  C<Q:PIR { say "hi"
}>. Mais là, encore on ne trouve rien. En fait les opcodes sont
souvent utilisés sous forme masquée qui permettra plus tard le port de
rakudo vers un autre VM.

L'artifice utilisé est le pseudo espace de nom C<nqp::>. Il est lié au
hash C<maphash> qui est initialisé dans C<NQP.pir>. On voit que
C<nqp::sha1> est appelé dans C<Grammar.pm> qui contient aussi la règle
pour le parser et donc C<Action.pm> contient la méthode à appeler
lorsque la règle est réduite.

  /nqp/src/ops/nqp.ops:2285

  inline op nqp_sha1(out STR, in STR) :base_core {
  
  nqp/src/NQP/grammar.pm:20

  my $source_id := nqp::sha1(nqp::getattr(self, Regex::Cursor, '$!target'));

  ~/git/rakudo/nqp/src/NQP/Grammar.pm:545

  token term:sym<nqp::op> {
      'nqp::' $<op>=[\w+] <args>?
  }

  ~/git/rakudo/nqp/src/NQP/Action.pm:1192

  method term:sym<nqp::op>($/) {
   my $op    := ~$<op>;
    my $args  := $<args> ?? $<args>[0].ast.list !! [];
    my $past  := PAST::Node.'map_node'(|$args, :map<nqp>, :op($op), 
                                       :node($/));

    pir::defined($past) ||
        $/.CURSOR.panic("Unrecognized nqp:: opcode 'nqp::$op'");
    make $past;
}
  
  /rakudo/nqp/src/PAST/NQP.pir:6659

  # serialization context related opcodes
  maphash['sha1']       = 'nqp_sha1__Ss'
=cut
